/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Sensor extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3024118732052738907L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Sensor\",\"namespace\":\"com.example.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"temperature\",\"type\":\"float\",\"default\":0.0},{\"name\":\"acceleration\",\"type\":\"float\",\"default\":0.0},{\"name\":\"velocity\",\"type\":\"float\",\"default\":0.0},{\"name\":\"brand\",\"type\":\"string\"},{\"name\":\"numberint\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Sensor> ENCODER =
      new BinaryMessageEncoder<Sensor>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Sensor> DECODER =
      new BinaryMessageDecoder<Sensor>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Sensor> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Sensor> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Sensor>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Sensor to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Sensor from a ByteBuffer. */
  public static Sensor fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public float temperature;
  @Deprecated public float acceleration;
  @Deprecated public float velocity;
  @Deprecated public java.lang.CharSequence brand;
  @Deprecated public int numberint;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Sensor() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param temperature The new value for temperature
   * @param acceleration The new value for acceleration
   * @param velocity The new value for velocity
   * @param brand The new value for brand
   * @param numberint The new value for numberint
   */
  public Sensor(java.lang.CharSequence id, java.lang.Float temperature, java.lang.Float acceleration, java.lang.Float velocity, java.lang.CharSequence brand, java.lang.Integer numberint) {
    this.id = id;
    this.temperature = temperature;
    this.acceleration = acceleration;
    this.velocity = velocity;
    this.brand = brand;
    this.numberint = numberint;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return temperature;
    case 2: return acceleration;
    case 3: return velocity;
    case 4: return brand;
    case 5: return numberint;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: temperature = (java.lang.Float)value$; break;
    case 2: acceleration = (java.lang.Float)value$; break;
    case 3: velocity = (java.lang.Float)value$; break;
    case 4: brand = (java.lang.CharSequence)value$; break;
    case 5: numberint = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public java.lang.Float getTemperature() {
    return temperature;
  }

  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(java.lang.Float value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'acceleration' field.
   * @return The value of the 'acceleration' field.
   */
  public java.lang.Float getAcceleration() {
    return acceleration;
  }

  /**
   * Sets the value of the 'acceleration' field.
   * @param value the value to set.
   */
  public void setAcceleration(java.lang.Float value) {
    this.acceleration = value;
  }

  /**
   * Gets the value of the 'velocity' field.
   * @return The value of the 'velocity' field.
   */
  public java.lang.Float getVelocity() {
    return velocity;
  }

  /**
   * Sets the value of the 'velocity' field.
   * @param value the value to set.
   */
  public void setVelocity(java.lang.Float value) {
    this.velocity = value;
  }

  /**
   * Gets the value of the 'brand' field.
   * @return The value of the 'brand' field.
   */
  public java.lang.CharSequence getBrand() {
    return brand;
  }

  /**
   * Sets the value of the 'brand' field.
   * @param value the value to set.
   */
  public void setBrand(java.lang.CharSequence value) {
    this.brand = value;
  }

  /**
   * Gets the value of the 'numberint' field.
   * @return The value of the 'numberint' field.
   */
  public java.lang.Integer getNumberint() {
    return numberint;
  }

  /**
   * Sets the value of the 'numberint' field.
   * @param value the value to set.
   */
  public void setNumberint(java.lang.Integer value) {
    this.numberint = value;
  }

  /**
   * Creates a new Sensor RecordBuilder.
   * @return A new Sensor RecordBuilder
   */
  public static com.example.avro.Sensor.Builder newBuilder() {
    return new com.example.avro.Sensor.Builder();
  }

  /**
   * Creates a new Sensor RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Sensor RecordBuilder
   */
  public static com.example.avro.Sensor.Builder newBuilder(com.example.avro.Sensor.Builder other) {
    return new com.example.avro.Sensor.Builder(other);
  }

  /**
   * Creates a new Sensor RecordBuilder by copying an existing Sensor instance.
   * @param other The existing instance to copy.
   * @return A new Sensor RecordBuilder
   */
  public static com.example.avro.Sensor.Builder newBuilder(com.example.avro.Sensor other) {
    return new com.example.avro.Sensor.Builder(other);
  }

  /**
   * RecordBuilder for Sensor instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Sensor>
    implements org.apache.avro.data.RecordBuilder<Sensor> {

    private java.lang.CharSequence id;
    private float temperature;
    private float acceleration;
    private float velocity;
    private java.lang.CharSequence brand;
    private int numberint;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.avro.Sensor.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.acceleration)) {
        this.acceleration = data().deepCopy(fields()[2].schema(), other.acceleration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.velocity)) {
        this.velocity = data().deepCopy(fields()[3].schema(), other.velocity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.brand)) {
        this.brand = data().deepCopy(fields()[4].schema(), other.brand);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.numberint)) {
        this.numberint = data().deepCopy(fields()[5].schema(), other.numberint);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Sensor instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.avro.Sensor other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.acceleration)) {
        this.acceleration = data().deepCopy(fields()[2].schema(), other.acceleration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.velocity)) {
        this.velocity = data().deepCopy(fields()[3].schema(), other.velocity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.brand)) {
        this.brand = data().deepCopy(fields()[4].schema(), other.brand);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.numberint)) {
        this.numberint = data().deepCopy(fields()[5].schema(), other.numberint);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public java.lang.Float getTemperature() {
      return temperature;
    }

    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder setTemperature(float value) {
      validate(fields()[1], value);
      this.temperature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder clearTemperature() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'acceleration' field.
      * @return The value.
      */
    public java.lang.Float getAcceleration() {
      return acceleration;
    }

    /**
      * Sets the value of the 'acceleration' field.
      * @param value The value of 'acceleration'.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder setAcceleration(float value) {
      validate(fields()[2], value);
      this.acceleration = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'acceleration' field has been set.
      * @return True if the 'acceleration' field has been set, false otherwise.
      */
    public boolean hasAcceleration() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'acceleration' field.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder clearAcceleration() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'velocity' field.
      * @return The value.
      */
    public java.lang.Float getVelocity() {
      return velocity;
    }

    /**
      * Sets the value of the 'velocity' field.
      * @param value The value of 'velocity'.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder setVelocity(float value) {
      validate(fields()[3], value);
      this.velocity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'velocity' field has been set.
      * @return True if the 'velocity' field has been set, false otherwise.
      */
    public boolean hasVelocity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'velocity' field.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder clearVelocity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'brand' field.
      * @return The value.
      */
    public java.lang.CharSequence getBrand() {
      return brand;
    }

    /**
      * Sets the value of the 'brand' field.
      * @param value The value of 'brand'.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder setBrand(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.brand = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'brand' field has been set.
      * @return True if the 'brand' field has been set, false otherwise.
      */
    public boolean hasBrand() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'brand' field.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder clearBrand() {
      brand = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'numberint' field.
      * @return The value.
      */
    public java.lang.Integer getNumberint() {
      return numberint;
    }

    /**
      * Sets the value of the 'numberint' field.
      * @param value The value of 'numberint'.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder setNumberint(int value) {
      validate(fields()[5], value);
      this.numberint = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'numberint' field has been set.
      * @return True if the 'numberint' field has been set, false otherwise.
      */
    public boolean hasNumberint() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'numberint' field.
      * @return This builder.
      */
    public com.example.avro.Sensor.Builder clearNumberint() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Sensor build() {
      try {
        Sensor record = new Sensor();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.temperature = fieldSetFlags()[1] ? this.temperature : (java.lang.Float) defaultValue(fields()[1]);
        record.acceleration = fieldSetFlags()[2] ? this.acceleration : (java.lang.Float) defaultValue(fields()[2]);
        record.velocity = fieldSetFlags()[3] ? this.velocity : (java.lang.Float) defaultValue(fields()[3]);
        record.brand = fieldSetFlags()[4] ? this.brand : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.numberint = fieldSetFlags()[5] ? this.numberint : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Sensor>
    WRITER$ = (org.apache.avro.io.DatumWriter<Sensor>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Sensor>
    READER$ = (org.apache.avro.io.DatumReader<Sensor>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
